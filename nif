#!/bin/sh

# Kernel to install
KERNEL="linux"
# Current archtetiture
arch=$(uname -m)
# Window settings
title="New Installer Framework 3 $SYSTEM"
height=600
width=450

sudo pacman -Syy
sudo pacman -S --noconfirm arch-install-scripts pacman-contrib gparted git

# Selecting the Drive
man_partition() {
	list=` lsblk -lno NAME,TYPE,SIZE,MOUNTPOINT | grep "disk" `

	zenity --info --height=${height} --width=${width} --title="$title" --text "Below is a list of the available drives on your system:\n\n$list" 

	lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u > devices.txt
	sed -i 's/\<disk\>//g' devices.txt
	devices=` awk '{print "FALSE " $0}' devices.txt `

	dev=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text "Select the drive that you want to use for installation." --column Drive --column Info $devices)

	# Partitioning
	# Allow user to partition using gparted
	zenity --question --height=${height} --width=${width} --title="$title" --text "Do you need to partition $dev?\nSelect 'yes' to open gparted and partition\nthe disk or format partitions if needed.\nThe installer will not format the partitions after this,\nso if your partitions need to be formatted please select yes\nand use gparted to format them now.\nThe installer supports using a seperate /boot /home and /root partition, as well as a swap partition or file."
	if [ "$?" = "0" ]
		then gparted
	fi

	# Select root partition
	root_part=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text="Choose a partition to use for the root partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." --column ' ' --column Partitions $(sudo fdisk -l | grep dev | grep -v Disk | awk '{print $1}' | awk '{ printf " FALSE ""\0"$0"\0" }'))
	#mounting root partition
	touch root_part.txt    
	echo $root_part >> root_part.txt
	mount $root_part /mnt

	# Swap partition?
	zenity --question --height=${height} --width=${width} --title="$title" --text "Do you want to use a swap partition?"
	if [ "$?" = "0" ]
		then swap_part=$(zenity --list  --radiolist --height=${height} --width=${width} --title="$title" --text="Choose a partition to use for the swap partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." --column ' ' --column 'Partitions' $(sudo fdisk -l | grep dev | grep -v Disk | awk '{print $1}' | awk '{ printf " FALSE ""\0"$0"\0" }'))
		mkswap $swap_part
		swapon $swap_part
	fi
	zenity --question --height=${height} --width=${width} --title="$title" --text "Would you like to create a 1GB swapfile on root?\nIf you've already mounted a swap partition or don't want swap, select \"No\".\nThis process could take some time, so please be patient."
	if [ "$?" = "0" ]
	 	then swapfile="yes"
		(echo "# Creating swapfile..."
		touch /mnt/swapfile
		dd if=/dev/zero of=/mnt/swapfile bs=1M count=1024
		chmod 600 /mnt/swapfile
		mkswap /mnt/swapfile
		swapon /mnt/swapfile) | zenity --progress --title="$title" --width=450 --pulsate --auto-close --no-cancel
	fi

	# Boot Partition?
	zenity --question --height=${height} --width=${width} --title="$title" --text "Do you want to use a seperate boot partition?" 
	if [ "$?" = "0" ]
		then boot_part=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text="Please select a partition for /boot. This list shows all available drives on your system, so choose with care." --column ' ' --column Partitions $(sudo fdisk -l | grep dev | grep -v Disk | awk '{print $1}' | awk '{ printf " FALSE ""\0"$0"\0" }'))

		mkdir -p /mnt/boot
		mount $boot_part /mnt/boot

	fi

	# Home Partition?
	zenity --question --height=${height} --width=${width} --title="$title" --text "Do you want to use a seperate home partition?" 
	if [ "$?" = "0" ]
		then home_part=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text="Select your home partition" --column ' ' --column Partitions $(sudo fdisk -l | grep dev | grep -v Disk | awk '{print $1}' | awk '{ printf " FALSE ""\0"$0"\0" }'))
		# mounting home partition
		mkdir -p /mnt/home
		mount $home_part /mnt/home
	fi
}

auto_partition() {
	list=` lsblk -lno NAME,TYPE,SIZE,MOUNTPOINT | grep "disk" `

	zenity --info --height=${height} --width=${width} --title="$title" --text "Below is a list of the available drives on your system:\n\n$list" 

	lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u > devices.txt
	sed -i 's/\<disk\>//g' devices.txt
	devices=` awk '{print "FALSE " $0}' devices.txt `

	dev=$(zenity --list  --radiolist --height=${height} --width=${width} --title="$title" --text "Select the drive that you want to use for installation." --column Drive --column Info $devices)

	zenity --question --height=${height} --width=${width} --title="$title" --text "Warning! This will erase all data on $dev\!\nAre you sure you want to continue?\nSelect 'Yes' to continue and 'No' to go back."
        yn="$?"
        touch root_part.txt
        if [ "$SYSTEM" = "BIOS" ]
	then echo {$dev}1 >> root_part.txt
	else echo {$dev}2 >> root_part.txt
        fi 
	if [ "$yn" = "1" ]
	then partition
	fi

	# Find total amount of RAM
	ram=$(grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//')
	# Find where swap partition stops
	num=4000

	if [ "$ram" -gt "$num" ]
		then swap_space=4096
		else swap_space=$ram
	fi
	
	uefi_swap=$(($swap_space + 513))


	#BIOS or UEFI
    if [ "$SYSTEM" = "BIOS" ]
        then
	       (echo "# Creating Partitions for BIOS..."
	        dd if=/dev/zero of=$dev bs=512 count=1
	        Parted "mklabel msdos"
	        Parted "mkpart primary ext4 1MiB 100%"
	        Parted "set 1 boot on"
	        mkfs.ext4 -F ${dev}1
	        mount ${dev}1 /mnt
		touch /mnt/swapfile
		dd if=/dev/zero of=/mnt/swapfile bs=1M count=${swap_space}
		chmod 600 /mnt/swapfile
		mkswap /mnt/swapfile
		swapon /mnt/swapfile
		swapfile="yes") | zenity --progress --title="$title" --width=450 --pulsate --auto-close --no-cancel
	    else
            	(echo "# Creating Partitions for UEFI..."
            	dd if=/dev/zero of=$dev bs=512 count=1
            	Parted "mklabel gpt"
            	Parted "mkpart primary fat32 1MiB 513MiB"
		Parted "mkpart primary ext4 513MiB 100%"
		Parted "set 1 boot on"
		mkfs.fat -F32 ${dev}1
		mkfs.ext4 -F ${dev}2
		mount ${dev}2 /mnt
		mkdir -p /mnt/boot
		mount ${dev}1 /mnt/boot
		touch /mnt/swapfile
		dd if=/dev/zero of=/mnt/swapfile bs=1M count=${swap_space}
		chmod 600 /mnt/swapfile
		mkswap /mnt/swapfile
		swapon /mnt/swapfile
		swapfile="yes") | zenity --progress --title="$title" --width=450 --pulsate --auto-close --no-cancel
	fi
			
}

partition() {
	ans=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text "Would you like to use automatic partitioning or would you like to partition the disk for installation yourself?\nAutomatic Partitioning will completely erase the disk that you select and install Arch." --column Select --column Choice FALSE "Automatic Partitioning" FALSE "Manual Partitioning")

	if [ "$ans" = "Automatic Partitioning" ]
	then auto_partition
	else
	man_partition
	fi

}

configure() {
	# Getting Locale
	country=$(zenity --list --radiolist --title="$title" --height=${height} --width=${width} --column Select --column Country --text="Select your country code. This will be used to find the fastest mirrors for you" FALSE all FALSE AU FALSE AT FALSE BD FALSE BY FALSE BE FALSE BA FALSE BR FALSE BG FALSE CA FALSE CL FALSE CN FALSE CO FALSE HR FALSE CZ FALSE DE FALSE DK FALSE EE FALSE ES FALSE FR FALSE GB FALSE HU FALSE IE FALSE IL FALSE IN FALSE IT FALSE JP FALSE KR FALSE KZ FALSE LK FALSE LU FALSE LV FALSE MK FALSE NL FALSE NO FALSE NZ FALSE PT FALSE RO FALSE RS FALSE RU FALSE SU FALSE SG FALSE SK FALSE TR FALSE TW FALSE UA FALSE US FALSE UZ FALSE VN FALSE ZA)
	locales=$(cat /etc/locale.gen | grep -v "#  " | sed 's/#//g' | sed 's/ UTF-8//g' | grep .UTF-8 | sort | awk '{ printf "FALSE ""\0"$0"\0" }')

	locale=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text "Select your locale/language.\nThe default is American English 'en_US.UTF-8'." --column Select --column Locale TRUE en_US.UTF-8 $locales)

	zenity --question --height=${height} --width=${width} --title="$title" --text="Would you like to change your keyboard model? The default is pc105"
	mod="$?"

	if [ "$mod" = "0" ]
		then model=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text="Select your keyboard model" --column Select --column Model $(localectl list-x11-keymap-models | awk '{ printf " FALSE ""\0"$0"\0" }'))
	fi

	layout=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text="Select your layout, a two-character country code" --column Select --column Layout $(localectl list-x11-keymap-layouts | awk '{ printf " FALSE ""\0"$0"\0" }'))

	zenity --question --height=${height} --width=${width} --title="$title" --text="Would you like to change your keyboard variant?"
	vary="$?"

	if [ "$vary" = "0" ]
		then variant=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text="Select your preferred variant" --column Select --column Variant $(localectl list-x11-keymap-variants | awk '{ printf " FALSE ""\0"$0"\0" }'))
	fi

	zenity --question --height=${height} --width=${width} --title="$title" --text="Do you see your keymap in any of the previous options?"
	map="$?"

	if [ "$map" = "1" ]
		then keymap=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text="Select your keymap" --column Select --column Keymap $(localectl list-keymaps | awk '{ printf " FALSE ""\0"$0"\0" }'))
		loadkeys $keymap
	fi

	setxkbmap $layout

	if [ "$model" = "0" ] 
		then setxkbmap -model $model 
	fi

	if [ "$vary" = "0" ] 
		then setxkbmap -variant $variant
	fi
	# Getting Timezone
	zones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "/" | sed "s/\/.*//g" | sort -ud | sort | awk '{ printf " FALSE ""\0"$0"\0" }')

	zone=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text "Select your country/zone." --column Select --column Zone $zones)

	subzones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "$zone/" | sed "s/$zone\///g" | sort -ud | sort | awk '{ printf " FALSE ""\0"$0"\0" }')

	subzone=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text "Select your sub-zone." --column Select --column Zone $subzones)

	# Getting Clock Preference
	clock=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text "Would you like to use UTC or Local Time\nUTC is recommended unless you are dual booting with Windows." --column Select --column Time TRUE utc FALSE localtime)
}

# allowing user to select extra applications
update() {
	pacman -Syy
}

# bootloader?
bootloader() {
	lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u > devices.txt
	sed -i 's/\<disk\>//g' devices.txt
	devices=` awk '{print "FALSE " $0}' devices.txt `

	grub=$(zenity --question --height=${height} --width=${width} --title="$title" --text "Would you like to install the bootloader?\nThe answer to this is usually yes,\nunless you are dual-booting and plan to have another system handle\nthe boot process.")
	grb="$?"
	if [ "$grb" = "0" ]
		then grub_device=$(zenity --list --radiolist --height=${height} --width=${width} --title="$title" --text "Where do you want to install the bootloader?" --column Select --column Device $devices)
	zenity --question --text="Do you have other operating systems on your device that you'd like grub to detect?"
	probe="$?"
	fi
}

# Installation
installing() {
	zenity --question --height=${height} --width=${width} --title="$title" --text "Please click yes to begin installation.\nClick no to abort installation.\nAll of the packages will be downloaded fresh, so installation\nmay take a few minutes."

	if [ "$?" = "1" ]
		then exit
	else (
	# sorting pacman mirrors
	echo "# Sorting fastest pacman mirrors..."
	rank=$(curl -s "https://www.archlinux.org/mirrorlist/?country="$country"&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 10 -)
	echo -e "$rank" > /etc/pacman.d/mirrorlist
	echo -e "$rank" > mirrors.txt
	# updating pacman cache
	echo "# Updating Pacman Cache..."
	pacman -Syy
	arch_chroot "pacman -Syy"

	#installing base
	echo "# Installing Base..."
	#pacstrap /mnt base bash nano vim-minimal vi linux-firmware cryptsetup e2fsprogs findutils gawk inetutils iproute2 jfsutils licenses linux-firmware logrotate lvm2 man-db man-pages mdadm pciutils procps-ng reiserfsprogs sysfsutils xfsprogs usbutils dosfstools mtools
	pacstrap /mnt ${arch_packages}

	#generating fstab
	echo "# Generating File System Table..."
	genfstab -p /mnt >> /mnt/etc/fstab
	if grep -q "/mnt/swapfile" "/mnt/etc/fstab"; then
		sed -i '/swapfile/d' /mnt/etc/fstab
		echo "/swapfile		none	swap	defaults	0	0" >> /mnt/etc/fstab
	fi
	echo "10"

	echo "20"

	echo "30"

	echo "40"

	echo "50"

	echo "60"

	# installing bootloader
	proc=$(grep -m1 vendor_id /proc/cpuinfo | awk '{print $3}')
	if [ "$proc" = "GenuineIntel" ]
		then pacstrap /mnt intel-ucode
	elif [ "$proc" = "AuthenticAMD" ]
		then arch_chroot "pacman -R --noconfirm intel-ucode"
		pacstrap /mnt amd-ucode
	fi
	if [ "$grb" = "0" ]
		then if [ "$probe" = "0" ]
			then pacstrap /mnt os-prober
		fi 
		if [ "$SYSTEM" = 'BIOS' ]
			then echo "# Installing Bootloader..."
			pacstrap /mnt grub
			arch_chroot "grub-install --target=i386-pc $grub_device"
			arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
		else
			echo "# Installing Bootloader..."
		if [ "$ans" = "Automatic Partitioning" ]
			then root_part=${dev}2
		fi
		[[ $(echo $root_part | grep "/dev/mapper/") != "" ]] && bl_root=$root_part \
		|| bl_root=$"PARTUUID="$(blkid -s PARTUUID ${root_part} | sed 's/.*=//g' | sed 's/"//g')

		arch_chroot "bootctl --path=/boot install"
		echo -e "default  Arch\ntimeout  10" > /mnt/boot/loader/loader.conf
		[[ -e /mnt/boot/initramfs-linux.img ]] && echo -e "title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\troot=${bl_root} rw" > /mnt/boot/loader/entries/Arch.conf
		[[ -e /mnt/boot/initramfs-linux-lts.img ]] && echo -e "title\tArchLinux LTS\nlinux\t/vmlinuz-linux-lts\ninitrd\t/initramfs-linux-lts.img\noptions\troot=${bl_root} rw" > /mnt/boot/loader/entries/Arch-lts.conf
		[[ -e /mnt/boot/initramfs-linux-hardened.img ]] && echo -e "title\tArch Linux hardened\nlinux\t/vmlinuz-linux-hardened\ninitrd\t/initramfs-linux-hardened.img\noptions\troot=${bl_root} rw" > /mnt/boot/loader/entries/Arch-hardened.conf
		[[ -e /mnt/boot/initramfs-linux-zen.img ]] && echo -e "title\tArch Linux Zen\nlinux\t/vmlinuz-linux-zen\ninitrd\t/initramfs-linux-zen.img\noptions\troot=${bl_root} rw" > /mnt/boot/loader/entries/Arch-zen.conf
		fi
	fi

	# running mkinit
	echo "# Running mkinitcpio..."
	arch_chroot "mkinitcpio -p linux"
	echo "70"

	# Installing Selecting Applications
	cp mirrors.txt /mnt/etc/pacman.d/mirrorlist
	arch_chroot "pacman -Syy"
	echo "80"

	#root password
	echo "# Setting root password..."
	touch .passwd
	echo -e "$rtpasswd1\n$rtpasswd2" > .passwd
	arch_chroot "passwd root" < .passwd >/dev/null
	rm .passwd

	#adding user
	echo "# Making new user..."
	arch_chroot "useradd -m -g users -G adm,lp,wheel,power,audio,video -s /bin/bash $usrname"
	touch .passwd
	echo -e "$usrpasswd1\n$userpasswd2" > .passwd
	arch_chroot "passwd $usrname" < .passwd >/dev/null
	rm .passwd

	#setting locale
	echo "# Generating Locale..."
	echo "LANG=\"${locale}\"" > /mnt/etc/locale.conf
	echo "${locale} UTF-8" > /mnt/etc/locale.gen
	arch_chroot "locale-gen"
	export LANG=${locale}

	#setting keymap
	mkdir -p /mnt/etc/X11/xorg.conf.d/
	echo -e 'Section "InputClass"\n\tIdentifier "system-keyboard"\n\tMatchIsKeyboard "on"\n\tOption "XkbLayout" "'$layout'"\n\tOption "XkbModel" "'$model'"\n\tOption "XkbVariant" ",'$variant'"\n\tOption "XkbOptions" "grp:alt_shift_toggle"\nEndSection' > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
	if [ "$map" = "1" ]
		then echo KEYMAP=$keymap >> /mnt/etc/vconsole.conf
	fi

	#setting timezone
	echo "# Setting Timezone..."
	arch_chroot "rm /etc/localtime"
	arch_chroot "ln -s /usr/share/zoneinfo/${zone}/${subzone} /etc/localtime"

	#setting hw clock
	echo "# Setting System Clock..."
	arch_chroot "hwclock --systohc --$clock"

	#setting hostname
	echo "# Setting Hostname..."
	arch_chroot "echo $htname > /etc/hostname"

	# setting n permissions
	echo "%wheel ALL=(ALL) ALL" >> /mnt/etc/sudoers

	echo "90"

	# unmounting partitions
	umount -R /mnt
	echo "100"
	echo "# Installation Finished!"
	) | zenity --progress --percentage=0 --title="$title" --width=450 --no-cancel
	fi
}

# execution
# System Detection
if [[ -d "/sys/firmware/efi/" ]]; then
      SYSTEM="UEFI"
      else
      SYSTEM="BIOS"
fi


# Adapted from AIS. An excellent bit of code!
arch_chroot() {
    arch-chroot /mnt /bin/bash -c "${1}"
}

# Adapted from Feliz Installer
Parted() {
	parted --script $dev "$1"
}

user_form() {
	OUTPUT=$(zenity --forms --title="$title" --text="Creating user" --separator="," --add-entry="Hostname" --add-entry="Username" --add-password="Password" --add-password="Reenter password" --add-password="Root password" --add-password="Reenter Root password")
	accepted=$?
	if ((accepted != 0)); then
		echo "Exiting"
		exit 1
	fi

	htname=$(awk -F, '{print $1}' <<<$OUTPUT)
	usrname=$(awk -F, '{print $2}' <<<$OUTPUT)
	usrpasswd1=$(awk -F, '{print $3}' <<<$OUTPUT)
	usrpasswd2=$(awk -F, '{print $4}' <<<$OUTPUT)
	rtpasswd1=$(awk -F, '{print $5}' <<<$OUTPUT)
	rtpasswd2=$(awk -F, '{print $6}' <<<$OUTPUT)

	if [ "$usrpasswd1" != "$usrpasswd2" ]; then
		zenity --error --height=${height} --width=${width} --title="$title" --text "The User passwords did not match, please try again."
		user_form
	elif [ "$rtpasswd1" != "$rtpasswd2" ]; then
		zenity --error --height=${height} --width=${width} --title="$title" --text "The Root passwords did not match, please try again."
		user_form
	fi

}

get_arch_packages(){
	arch_packages=""
	while read -r l; do
		arch_packages="${arch_packages} ${l}"
	done < "/usr/share/nif/${arch}/Packages"
}

get_aur_packages(){
	aur_packages=""
	while read -r l; do
		aur_packages="${arch_packages} ${l}"
	done < "/usr/share/nif/${arch}/AUR"
}

# Greeting the user
zenity --question --height=${height} --width=${width} --title="$title" --text "Welcome to the Zen Arch Installer.\n\nNext you will be prompted with a series of questions that will\nguide you through installing Arch Linux.\nYou will be asked if you want to use manual or auto partitioning.\nIf you select auto partitioning the drive that you select will be completely deleted\nand Arch will be installed. If you select manual, you will have the opportunity to partition the disk yourself\nand select which partitons to use for installation.\nClick 'yes' to begin or 'no' to exit."

if [ "$?" = "1" ]
	then exit
fi

partition
configure

user_form

update
get_arch_packages
get_aur_packages

bootloader
installing
